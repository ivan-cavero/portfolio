---
import { t, type TranslationKey } from '../i18n/translations';

interface Props {
  locale: 'en' | 'es';
}

const { locale } = Astro.props;

const statCategories = [
  { key: 'languages', title: 'top.languages', icon: 'code' },
  { key: 'editors', title: 'editors', icon: 'edit' },
  { key: 'operating_systems', title: 'operating.systems', icon: 'monitor' }
] as const;

const translations = {
  'coding.stats': t('coding.stats', locale),
  'loading': t('loading', locale),
  'stats.error': t('stats.error', locale),
  'retry': t('retry', locale),
  'total.coding.time': t('total.coding.time', locale),
  'daily.average': t('daily.average', locale),
  'top.languages': t('top.languages', locale),
  'editors': t('editors', locale),
  'operating.systems': t('operating.systems', locale),
  'system': t('system', locale),
  'status': t('status', locale),
  'data.provided.by': t('data.provided.by', locale),
  'tracking.since': t('tracking.since', locale)
};
---

<div class="panel col-span-full fade-in">
  <div class="panel-header">
    <div class="flex items-center justify-between w-full">
      <div class="flex items-center gap-2">
        <span class="text-[var(--accent)]">
          <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <path d="M12 20v-6M6 20V10M18 20V4"/>
          </svg>
        </span>
        <span class="header-text">{translations['coding.stats']}</span>
      </div>
      <div class="flex items-center gap-4 text-xs text-muted-foreground/60">
        <div class="flex items-center gap-1">
          <span class="text-[var(--accent)]">
            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <circle cx="12" cy="12" r="10"/>
              <polyline points="12 6 12 12 16 14"/>
            </svg>
          </span>
          <span>{translations['tracking.since']} Jul 26, 2021</span>
        </div>
        <div class="flex items-center gap-1">
          <span class="text-[var(--accent)]">
            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <path d="M21 12a9 9 0 1 1-6.219-8.56"/>
            </svg>
          </span>
          <span>{translations['data.provided.by']}</span>
          <a href="https://wakatime.com/@Nozus" target="_blank" rel="noopener noreferrer" class="text-[var(--accent)] hover:text-[var(--accent)]/80 underline underline-offset-4 inline-flex items-center">
            WakaTime
            <svg width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="inline-block ml-1">
              <path d="M7 7h10v10"/>
              <path d="M7 17 17 7"/>
            </svg>
          </a>
        </div>
      </div>
    </div>
  </div>

  <div class="p-6 flex flex-col gap-8" id="statsContent">
    <div class="flex flex-col items-center justify-center min-h-[400px]">
      <div class="loading-container">
        <svg class="animate-spin -ml-1 mr-3 h-8 w-8 text-[var(--accent)]" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
          <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
          <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
        </svg>
        <div class="loading-text">
          <span class="animate-pulse">{translations['loading']}</span>
          <span class="dots">
            <span class="dot">.</span>
            <span class="dot">.</span>
            <span class="dot">.</span>
          </span>
        </div>
      </div>
    </div>
  </div>
</div>

<style>
  .loading-container {
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .loading-text {
    display: inline-flex;
    align-items: center;
    font-family: var(--font-headers);
    color: var(--accent);
    font-size: 0.875rem;
    letter-spacing: 0.1em;
  }

  .dots {
    display: inline-flex;
    margin-left: 4px;
  }

  .dot {
    animation: dotPulse 1.5s infinite;
    opacity: 0;
  }

  .dot:nth-child(2) {
    animation-delay: 0.5s;
  }

  .dot:nth-child(3) {
    animation-delay: 1s;
  }

  @keyframes dotPulse {
    0%, 100% { opacity: 0; }
    50% { opacity: 1; }
  }

  .error-container {
    text-align: center;
  }

  .retry-button {
    background: transparent;
    border: 1px solid var(--accent);
    color: var(--accent);
    padding: 0.5rem 1rem;
    border-radius: 0.375rem;
    font-family: var(--font-headers);
    font-size: 0.875rem;
    transition: all 0.2s;
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    margin-top: 1rem;
  }

  .retry-button:hover {
    background: var(--accent);
    color: var(--background);
  }

  .retry-button svg {
    transition: transform 0.2s;
  }

  .retry-button:hover svg {
    transform: rotate(180deg);
  }
</style>

<script define:vars={{ translations, statCategories }}>
  let stats = null;
  let isFetching = false;
  const statsContent = document.getElementById('statsContent');

  function getIcon(iconName) {
    const icons = {
      code: '<svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-layout-template"><rect width="18" height="7" x="3" y="3" rx="1"/><rect width="9" height="7" x="3" y="14" rx="1"/><rect width="5" height="7" x="16" y="14" rx="1"/></svg>',
      edit: '<svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-server"><rect width="20" height="8" x="2" y="2" rx="2" ry="2"/><rect width="20" height="8" x="2" y="14" rx="2" ry="2"/><line x1="6" x2="6.01" y1="6" y2="6"/><line x1="6" x2="6.01" y1="18" y2="18"/></svg>',
      monitor: '<svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-cloud"><path d="M17.5 19H9a7 7 0 1 1 6.71-9h1.79a4.5 4.5 0 1 1 0 9Z"/></svg>'
    };
    return icons[iconName] || '';
  }

  function parseHours(timeString) {
    const match = timeString.match(/(\d+,?\d*)\s*hrs?/);
    if (match) {
      return parseFloat(match[1].replace(',', ''));
    }
    return 0;
  }

  function getColorClass(hours) {
    if (hours >= 1000) return { color: 'text-green-400', bgColor: 'bg-green-400/20' };
    if (hours >= 500) return { color: 'text-yellow-400', bgColor: 'bg-yellow-400/20' };
    if (hours >= 100) return { color: 'text-blue-400', bgColor: 'bg-blue-400/20' };
    return { color: 'text-purple-400', bgColor: 'bg-purple-400/20' };
  }

  function showError() {
    if (statsContent) {
      statsContent.innerHTML = `
        <div class="flex flex-col items-center justify-center min-h-[400px]">
          <div class="error-container">
            <svg width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="text-red-500 mb-4">
              <path d="m21.73 18-8-14a2 2 0 0 0-3.48 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3Z"/>
              <line x1="12" y1="9" x2="12" y2="13"/>
              <line x1="12" y1="17" x2="12.01" y2="17"/>
            </svg>
            <p class="text-red-500 text-lg mb-2">${translations['stats.error']}</p>
            <button class="retry-button" onclick="fetchStats()">
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <path d="M21 12a9 9 0 1 1-9-9c2.52 0 4.93 1 6.74 2.74L21 8"/>
                <path d="M21 3v5h-5"/>
              </svg>
              ${translations['retry']}
            </button>
          </div>
        </div>
      `;
    }
  }

  function showLoading() {
    if (statsContent) {
      statsContent.innerHTML = `
        <div class="flex flex-col items-center justify-center min-h-[400px]">
          <div class="inline-flex items-center gap-3">
            <svg class="animate-spin h-5 w-5 text-[var(--accent)]" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
              <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
              <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
            <div class="loading-text">
              <span class="animate-pulse">${translations['loading']}</span>
              <span class="dots">
                <span class="dot">.</span>
                <span class="dot">.</span>
                <span class="dot">.</span>
              </span>
            </div>
          </div>
        </div>
      `;
    }
  }

  function renderStats() {
    if (!stats || !statsContent) return;

    const { data } = stats;

    statsContent.innerHTML = `
      <div class="data-display bg-black/40 p-4">
        <div class="flex flex-wrap gap-4 justify-around">
          <div class="flex items-center gap-2">
            <div class="w-2 h-2 rounded-full bg-green-400/20"></div>
            <div class="flex items-center gap-1">
              <span class="text-xs font-bold text-green-400">${translations['total.coding.time']}</span>
              <span class="text-xs text-gray-400">${data.human_readable_total || 'N/A'}</span>
            </div>
          </div>
          <div class="flex items-center gap-2">
            <div class="w-2 h-2 rounded-full bg-yellow-400/20"></div>
            <div class="flex items-center gap-1">
              <span class="text-xs font-bold text-yellow-400">${translations['daily.average']}</span>
              <span class="text-xs text-gray-400">${data.human_readable_daily_average || 'N/A'}</span>
            </div>
          </div>
        </div>
      </div>

      <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
        ${statCategories.map(category => `
          <div class="space-y-4">
            <div class="flex items-center gap-2">
              <span class="text-[var(--accent)]">
                ${getIcon(category.icon)}
              </span>
              <h3 class="header-text">${translations[category.title]}</h3>
            </div>
            <table class="w-full">
              <thead>
                <tr>
                  <th class="text-left text-xs text-[var(--accent)] pb-4">${translations['system']}</th>
                  <th class="text-right text-xs text-[var(--accent)] pb-4 min-w-[100px]">${translations['status']}</th>
                </tr>
              </thead>
              <tbody class="space-y-4">
                ${(data[category.key] || []).slice(0, category.key === 'languages' ? 8 : 5).map(item => {
                  const hours = parseHours(item.text);
                  const colorClass = getColorClass(hours);
                  return `
                    <tr class="border-b border-[var(--border)]">
                      <td class="py-4 pr-4">${item.name}</td>
                      <td class="py-4 text-right whitespace-nowrap">
                        <span class="px-3 py-1.5 rounded text-xs ${colorClass.bgColor} ${colorClass.color}">
                          ${item.percent.toFixed(1)}% (${item.text})
                        </span>
                      </td>
                    </tr>
                  `;
                }).join('')}
              </tbody>
            </table>
          </div>
        `).join('')}
      </div>
    `;
  }

  async function fetchStats() {
    if (isFetching) return;
    isFetching = true;
    showLoading();

    try {
      const response = await fetch('/api/wakatime-stats');
      if (!response.ok) {
        throw new Error('Failed to fetch stats');
      }
      stats = await response.json();
      renderStats();
    } catch (error) {
      console.error('Error fetching WakaTime stats:', error);
      showError();
    } finally {
      isFetching = false;
    }
  }

  let hasScrolledHalfway = false;

  function handleScroll() {
    if (!hasScrolledHalfway && window.scrollY > window.innerHeight / 2) {
      hasScrolledHalfway = true;
      fetchStats();
      window.removeEventListener('scroll', handleScroll);
    }
  }

  window.addEventListener('scroll', handleScroll);

  document.addEventListener('astro:page-load', () => {
    stats = null;
    hasScrolledHalfway = false;
    isFetching = false;
    window.addEventListener('scroll', handleScroll);
  });
</script>

